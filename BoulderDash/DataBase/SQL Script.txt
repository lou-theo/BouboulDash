#------------------------------------------------------------
#        Script MySQL.
#------------------------------------------------------------


#------------------------------------------------------------
# Table: Permeability
#------------------------------------------------------------

CREATE TABLE Permeability(
        ID   int (11) Auto_increment  NOT NULL ,
        Type Char (25) NOT NULL ,
        PRIMARY KEY (ID )
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: Map
#------------------------------------------------------------

CREATE TABLE Map(
        ID               int (11) Auto_increment  NOT NULL ,
        Width            Int NOT NULL ,
        Height           Int NOT NULL ,
        DiamondToCollect Int NOT NULL ,
        Timer            Int NOT NULL ,
        PRIMARY KEY (ID )
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: Element
#------------------------------------------------------------

CREATE TABLE Element(
        ID              int (11) Auto_increment  NOT NULL ,
        Name            Char (25) NOT NULL ,
        Code            Char (3) NOT NULL ,
        Value           Int ,
        Droppable       Bool ,
        ID_Permeability Int NOT NULL ,
        PRIMARY KEY (ID )
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: COMPOSED
#------------------------------------------------------------

CREATE TABLE COMPOSED(
        X          Int NOT NULL ,
        Y          Int NOT NULL ,
        ID_Map         Int NOT NULL ,
        ID_Element Int NOT NULL ,
        PRIMARY KEY ( ID_Map, ID_Element, X , Y )
)ENGINE=InnoDB;

ALTER TABLE Element ADD CONSTRAINT FK_Element_ID_Permeability FOREIGN KEY (ID_Permeability) REFERENCES Permeability(ID);
ALTER TABLE COMPOSED ADD CONSTRAINT FK_COMPOSED_ID FOREIGN KEY (ID_Map) REFERENCES Map(ID);
ALTER TABLE COMPOSED ADD CONSTRAINT FK_COMPOSED_ID_Element FOREIGN KEY (ID_Element) REFERENCES Element(ID);



#------------------------------------------------------------
# FILL database
#------------------------------------------------------------
INSERT INTO permeability (Type) VALUES ("PENETRABLE");
INSERT INTO permeability (Type) VALUES ("BREAKABLE");
INSERT INTO permeability (Type) VALUES ("PUSHABLE");
INSERT INTO permeability (Type) VALUES ("COLLECTABLE");
INSERT INTO permeability (Type) VALUES ("SOLID");
INSERT INTO permeability (Type) VALUES ("ENTRY");
INSERT INTO permeability (Type) VALUES ("UNBREAKABLE");
INSERT INTO permeability (Type) VALUES ("LIVING");

INSERT INTO `element` (`ID`, `Name`, `Code`, `Value`, `Droppable`, `ID_Permeability`) VALUES
(1, 'Mud', 'm', NULL, NULL, 2),
(2, 'Door', 'D', NULL, NULL, 6),
(3, 'SuperWall', 'S', NULL, NULL, 7),
(4, 'Air', 'a', NULL, NULL, 1),
(5, 'Wall', 'W', NULL, NULL, 5),
(6, 'Diamond', 'd', NULL, NULL, 4),
(7, 'Rock', 'r', NULL, NULL, 3),
(8, 'Goblin', '1', 50, NULL, 8),
(9, 'Monster', '2', 50, NULL, 8),
(10, 'Bat', '3', NULL, 1, 8),
(11, 'Spider', '4', NULL, 1, 8),
(12, 'Hero', 'H', NULL, NULL, 8);


INSERT INTO `map` (`ID`, `Width`, `Height`, `DiamondToCollect`, `Timer`) VALUES
(1, 5, 5, 2, 30),
(2, 10, 10, 2, 60);


INSERT INTO `composed` (`X`, `Y`, `ID_Map`, `ID_Element`) VALUES
(1, 1, 1, 1),
(1, 2, 1, 1),
(1, 3, 1, 1),
(3, 2, 1, 1),
(1, 1, 2, 1),
(1, 2, 2, 1),
(1, 3, 2, 1),
(1, 4, 2, 1),
(1, 5, 2, 1),
(1, 6, 2, 1),
(1, 7, 2, 1),
(1, 8, 2, 1),
(2, 5, 2, 1),
(2, 6, 2, 1),
(2, 7, 2, 1),
(2, 8, 2, 1),
(3, 1, 2, 1),
(3, 2, 2, 1),
(3, 4, 2, 1),
(3, 5, 2, 1),
(3, 6, 2, 1),
(3, 7, 2, 1),
(3, 8, 2, 1),
(4, 1, 2, 1),
(4, 2, 2, 1),
(4, 3, 2, 1),
(4, 4, 2, 1),
(4, 5, 2, 1),
(5, 1, 2, 1),
(5, 3, 2, 1),
(5, 4, 2, 1),
(5, 5, 2, 1),
(6, 1, 2, 1),
(6, 2, 2, 1),
(6, 3, 2, 1),
(6, 5, 2, 1),
(6, 8, 2, 1),
(7, 1, 2, 1),
(7, 2, 2, 1),
(7, 3, 2, 1),
(7, 4, 2, 1),
(7, 5, 2, 1),
(7, 8, 2, 1),
(8, 1, 2, 1),
(8, 2, 2, 1),
(8, 3, 2, 1),
(8, 4, 2, 1),
(8, 5, 2, 1),
(8, 6, 2, 1),
(8, 7, 2, 1),
(8, 8, 2, 1),
(2, 2, 1, 2),
(2, 2, 2, 2),
(0, 0, 1, 3),
(0, 1, 1, 3),
(0, 2, 1, 3),
(0, 3, 1, 3),
(0, 4, 1, 3),
(1, 0, 1, 3),
(1, 4, 1, 3),
(2, 0, 1, 3),
(2, 4, 1, 3),
(3, 0, 1, 3),
(3, 4, 1, 3),
(4, 0, 1, 3),
(4, 1, 1, 3),
(4, 2, 1, 3),
(4, 3, 1, 3),
(4, 4, 1, 3),
(0, 0, 2, 3),
(0, 1, 2, 3),
(0, 2, 2, 3),
(0, 3, 2, 3),
(0, 4, 2, 3),
(0, 5, 2, 3),
(0, 6, 2, 3),
(0, 7, 2, 3),
(0, 8, 2, 3),
(0, 9, 2, 3),
(1, 0, 2, 3),
(1, 9, 2, 3),
(2, 0, 2, 3),
(2, 9, 2, 3),
(3, 0, 2, 3),
(3, 9, 2, 3),
(4, 0, 2, 3),
(4, 9, 2, 3),
(5, 0, 2, 3),
(5, 9, 2, 3),
(6, 0, 2, 3),
(6, 9, 2, 3),
(7, 0, 2, 3),
(7, 9, 2, 3),
(8, 0, 2, 3),
(8, 9, 2, 3),
(9, 0, 2, 3),
(9, 1, 2, 3),
(9, 2, 2, 3),
(9, 3, 2, 3),
(9, 4, 2, 3),
(9, 5, 2, 3),
(9, 6, 2, 3),
(9, 7, 2, 3),
(9, 8, 2, 3),
(9, 9, 2, 3),
(4, 7, 2, 4),
(4, 8, 2, 4),
(5, 6, 2, 4),
(5, 7, 2, 4),
(5, 8, 2, 4),
(6, 6, 2, 4),
(6, 7, 2, 4),
(7, 6, 2, 4),
(7, 7, 2, 4),
(2, 1, 1, 6),
(2, 3, 1, 6),
(2, 1, 2, 6),
(2, 3, 2, 6),
(3, 1, 1, 7),
(2, 4, 2, 7),
(5, 2, 2, 7),
(6, 4, 2, 7),
(4, 6, 2, 9),
(3, 3, 1, 12),
(3, 3, 2, 12);




#------------------------------------------------------------
# Stored procedure
#------------------------------------------------------------

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findHeight`(IN `level` INT)
    NO SQL
SELECT 
	Height
FROM
	map
WHERE 
	ID = LEVEL$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findAllBricks`(IN `level` INT)
    NO SQL
SELECT
	Code,
    X,
    Y
FROM
	element 
    INNER JOIN composed ON element.ID = composed.ID_Element
    INNER JOIN map ON composed.ID_Map = map.ID
WHERE
	map.ID = LEVEL$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findWidth`(IN `level` INT)
    NO SQL
SELECT
	width
From 
	map
WHERE
	ID = LEVEL$$
DELIMITER ;


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findTimer`(IN `level` INT)
    NO SQL
SELECT
	Timer
FROM 
	map
WHERE
	ID = LEVEL$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findDiamondToCollect`(IN `level` INT)
    NO SQL
SELECT
	diamondtocollect
FROM
	map
WHERE
	ID = LEVEL$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findCode`(IN `callout` CHAR(20))
    NO SQL
SELECT
	Code
FROM
	element
where 
	Name = callout$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findPermeability`(IN `callout` CHAR(20))
    NO SQL
SELECT
	Type
FROM
	element 
    INNER JOIN permeability on element.ID_Permeability = permeability.ID
WHERE
	name = callout$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findValue`(IN `callout` CHAR(20))
    NO SQL
SELECT	
	VALUE
FROM
	element
WHERE
	name = callout$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findDrop`(IN `callout` CHAR(20))
    NO SQL
SELECT
	Droppable
FROM 
	element
WHERE
	name = callout$$
DELIMITER ;
